const fs = require('fs-extra');
const path = require('path');

/**
 * PDF Generator for patient risk assessment reports
 * This utility handles PDF file operations and generation
 */
class PdfGenerator {
    constructor() {
        this.pdfStoragePath = process.env.PDF_STORAGE_PATH || './pdfs';
        this.ensureStorageDirectory();
    }

    /**
     * Ensure PDF storage directory exists
     */
    async ensureStorageDirectory() {
        try {
            await fs.ensureDir(this.pdfStoragePath);
            console.log(`✅ PDF storage directory ready: ${this.pdfStoragePath}`);
        } catch (error) {
            console.error('❌ Failed to create PDF storage directory:', error.message);
        }
    }

    /**
     * Generate a sample PDF for testing purposes
     * @param {string} patientId - Patient ID
     * @param {Object} patientData - Patient data
     */
    async generateSamplePdf(patientId, patientData = {}) {
        try {
            // Create a simple text-based PDF content (in real implementation, use a proper PDF library)
            const pdfContent = this.createPdfContent(patientId, patientData);
            
            // For demonstration, we'll create a text file that simulates a PDF
            // In production, use libraries like PDFKit, jsPDF, or Puppeteer
            const fileName = `patient_risk_assessment_${patientId}_${new Date().toISOString().split('T')[0]}.txt`;
            const filePath = path.join(this.pdfStoragePath, fileName);
            
            await fs.writeFile(filePath, pdfContent);
            
            console.log(`✅ Sample PDF generated: ${filePath}`);
            return filePath;
            
        } catch (error) {
            console.error('❌ Failed to generate sample PDF:', error.message);
            throw new Error(`PDF generation failed: ${error.message}`);
        }
    }

    /**
     * Create PDF content (simplified for demonstration)
     * @param {string} patientId - Patient ID
     * @param {Object} patientData - Patient data
     */
    createPdfContent(patientId, patientData) {
        const timestamp = new Date().toISOString();
        
        return `PATIENT RISK ASSESSMENT REPORT
===========================================

Patient Information:
- Patient ID: ${patientId}
- Name: ${patientData.name || 'Not provided'}
- Age: ${patientData.age || 'Not provided'}
- Gender: ${patientData.gender || 'Not provided'}
- Email: ${patientData.email || 'Not provided'}

Health Metrics:
- BMI: ${patientData.bmi || 'Not provided'}
- Blood Pressure: ${patientData.bloodPressure || 'Not provided'}
- Glucose Level: ${patientData.glucose || 'Not provided'}
- Cholesterol: ${patientData.cholesterol || 'Not provided'}

Risk Assessment:
- 30-Day Risk: ${patientData.risk30d || 'Not calculated'}%
- 60-Day Risk: ${patientData.risk60d || 'Not calculated'}%
- 90-Day Risk: ${patientData.risk90d || 'Not calculated'}%
- Risk Level: ${patientData.riskLabel || 'Not determined'}

AI Recommendations:
${patientData.recommendations || 'No recommendations available'}

Medical Conditions:
${patientData.conditions || 'None reported'}

Report Generated: ${timestamp}
Generated by: Patient Risk Assessment System

===========================================
This is a sample report for demonstration purposes.
In production, this would be a properly formatted PDF document.
`;
    }

    /**
     * Copy existing PDF file to storage directory
     * @param {string} sourcePath - Source PDF path
     * @param {string} patientId - Patient ID
     */
    async copyExistingPdf(sourcePath, patientId) {
        try {
            // Check if source file exists
            if (!await fs.pathExists(sourcePath)) {
                throw new Error(`Source PDF not found: ${sourcePath}`);
            }

            // Create new filename
            const fileName = `patient_risk_assessment_${patientId}_${new Date().toISOString().split('T')[0]}.pdf`;
            const destinationPath = path.join(this.pdfStoragePath, fileName);

            // Copy file
            await fs.copy(sourcePath, destinationPath);
            
            console.log(`✅ PDF copied to storage: ${destinationPath}`);
            return destinationPath;
            
        } catch (error) {
            console.error('❌ Failed to copy PDF:', error.message);
            throw new Error(`PDF copy failed: ${error.message}`);
        }
    }

    /**
     * Get PDF file path for a patient
     * @param {string} patientId - Patient ID
     */
    async getPdfPath(patientId) {
        try {
            // Look for existing PDF files for this patient
            const files = await fs.readdir(this.pdfStoragePath);
            const patientFiles = files.filter(file => 
                file.includes(`patient_risk_assessment_${patientId}`) && 
                file.endsWith('.pdf')
            );

            if (patientFiles.length > 0) {
                // Return the most recent file
                const latestFile = patientFiles.sort().pop();
                return path.join(this.pdfStoragePath, latestFile);
            }

            return null;
            
        } catch (error) {
            console.error('❌ Failed to get PDF path:', error.message);
            return null;
        }
    }

    /**
     * List all PDF files in storage
     */
    async listPdfFiles() {
        try {
            const files = await fs.readdir(this.pdfStoragePath);
            const pdfFiles = files.filter(file => file.endsWith('.pdf'));
            
            return pdfFiles.map(file => ({
                name: file,
                path: path.join(this.pdfStoragePath, file),
                size: fs.statSync(path.join(this.pdfStoragePath, file)).size
            }));
            
        } catch (error) {
            console.error('❌ Failed to list PDF files:', error.message);
            return [];
        }
    }

    /**
     * Delete PDF file
     * @param {string} filePath - Path to PDF file
     */
    async deletePdf(filePath) {
        try {
            if (await fs.pathExists(filePath)) {
                await fs.remove(filePath);
                console.log(`✅ PDF deleted: ${filePath}`);
                return true;
            }
            return false;
            
        } catch (error) {
            console.error('❌ Failed to delete PDF:', error.message);
            return false;
        }
    }

    /**
     * Get storage statistics
     */
    async getStorageStats() {
        try {
            const files = await this.listPdfFiles();
            const totalSize = files.reduce((sum, file) => sum + file.size, 0);
            
            return {
                totalFiles: files.length,
                totalSize: totalSize,
                storagePath: this.pdfStoragePath
            };
            
        } catch (error) {
            console.error('❌ Failed to get storage stats:', error.message);
            return {
                totalFiles: 0,
                totalSize: 0,
                storagePath: this.pdfStoragePath
            };
        }
    }
}

// Create singleton instance
const pdfGenerator = new PdfGenerator();

module.exports = pdfGenerator;
